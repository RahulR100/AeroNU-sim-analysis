%given a table of data and its keys, generate a set of graphs for that key
%and then save it

%% HOW TO USE
% Read this first to understand how to use the function

% INPUTS:
% Every time it is called the function is given the following inputs:

% 1) keys --> These are the variable names. Listed from highest to lowest
% level. I.e. keys(1) is the highest level, which keys(n) is the lowest.

% 2) dat --> The original data table. This is NOT the data from the fine
% results calculation. Rather this is the original table. While you may not
% need to use this data, it is provided for convenience.

% 3) fineResults --> This is the data generated by the finecalc function.
% It is an array of the results of every finecalc iteration. This is most
% likely the data that you will need to iterate over to perform
% calculations.

% 4) location --> The location of THE FOLDER in which your graphs will be
% saved. You need to append the "/" to this to enter the folder in your
% loop

% If you find yourself iterating over dat and not fineResults then you are
% doing something wrong and this is probably not the file you want to be
% editing.

% OUTPUTS:
% Your function can return nothing, or 1 object. To return multiple
% objects, consider the use of an array or struct.

% You may save any generated files to location. Usually this involves 
% something like exportgraphics(location, "/", ...);

% WHAT IS A REDUCER?
% When data is processed at lower level functions (like finecalc) the new
% calculated data is placed into the structure of the old data. However, to
% perform higher level calculations, this structure must be changed. A
% reducer does this. It changes the structure of the data to allow higher
% level calculations to be performed. 

%% TEMPLATE
% copy this template when you write your function

%{
function ret = coarsecalc(keys, dat, fineResults, location)

    %extract the headers from the data and reduce the results
    headers = {dat.head};
    reducedData = reducer(headers, fineResults);

    %make the destination folder if necessary
    mkdir(location);
    
    %process the data here (usually a for loop of some kind) and save it to
    %the appropriate location.
    
    %ret =? return something if necessary

    %see example below for more detail

end %end function
%}

%% EXAMPLE
% this function graphs every variable in the combinedTable

%{
function ret = coarsecalc(keys, dat, fineResults, location)

    headers = {dat.head};
    reducedData = reducer(headers, fineResults);
    slopes = [];
    
    mkdir(location);
    
    for i = 1:length(reducedData)
        temp = reducedData(i).data;
        x = [temp.key];
        y = [temp.value];
        
        gph = makegraph(x, y, keys(2), "");
        exportgraphics(gph, append(location, "/result", num2str(i), ".png"));
        
        slope = polyfit(x, y, 1);
        slopes = [slopes, slope(1)];
    end
    
    gph = makegraph([reducedData.head], slopes, keys(1), "");
    exportgraphics(gph, append(location, "/final.png"));
    
    ret = reducedData;
end %end function
%}

%% DEFINE YOUR FUNCTION HERE:

function ret = coarsecalc(keys, dat, fineResults, location)

    headers = {dat.head};
    reducedData = reducer(headers, fineResults);
    slopes = [];
    
    mkdir(location);
    
    for i = 1:length(reducedData)
        temp = reducedData(i).data;
        x = [temp.key];
        y = [temp.value];
        
        gph = makegraph(x, y, keys(2), "");
        exportgraphics(gph, append(location, "/result", num2str(i), ".png"));
        
        slope = polyfit(x, y, 1);
        slopes = [slopes, slope(1)];
    end
    
    gph = makegraph([reducedData.head], slopes, keys(1), "");
    exportgraphics(gph, append(location, "/final.png"));
    
    ret = reducedData;

end %end function